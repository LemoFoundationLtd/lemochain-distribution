// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package database

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/common"
)

// MarshalJSON marshals as JSON.
func (m MetaData) MarshalJSON() ([]byte, error) {
	type MetaData struct {
		Id      common.Hash    `json:"id" gencodec:"required"`
		Code    common.Hash    `json:"code" gencodec:"required"`
		Owner   common.Address `json:"owner" gencodec:"required"`
		Profile string         `json:"profile" gencodec:"required"`
	}
	var enc MetaData
	enc.Id = m.Id
	enc.Code = m.Code
	enc.Owner = m.Owner
	enc.Profile = m.Profile
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (m *MetaData) UnmarshalJSON(input []byte) error {
	type MetaData struct {
		Id      *common.Hash    `json:"id" gencodec:"required"`
		Code    *common.Hash    `json:"code" gencodec:"required"`
		Owner   *common.Address `json:"owner" gencodec:"required"`
		Profile *string         `json:"profile" gencodec:"required"`
	}
	var dec MetaData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id == nil {
		return errors.New("missing required field 'id' for MetaData")
	}
	m.Id = *dec.Id
	if dec.Code == nil {
		return errors.New("missing required field 'code' for MetaData")
	}
	m.Code = *dec.Code
	if dec.Owner == nil {
		return errors.New("missing required field 'owner' for MetaData")
	}
	m.Owner = *dec.Owner
	if dec.Profile == nil {
		return errors.New("missing required field 'profile' for MetaData")
	}
	m.Profile = *dec.Profile
	return nil
}

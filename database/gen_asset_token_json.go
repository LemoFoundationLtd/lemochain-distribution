// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package database

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/common"
)

// MarshalJSON marshals as JSON.
func (a AssetToken) MarshalJSON() ([]byte, error) {
	type AssetToken struct {
		Id       common.Hash    `json:"assetId" gencodec:"required"`
		Code     common.Hash    `json:"assetCode" gencodec:"required"`
		Owner    common.Address `json:"owner" gencodec:"required"`
		MetaData string         `json:"metaData" gencodec:"required"`
	}
	var enc AssetToken
	enc.Id = a.Id
	enc.Code = a.Code
	enc.Owner = a.Owner
	enc.MetaData = a.MetaData
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (a *AssetToken) UnmarshalJSON(input []byte) error {
	type AssetToken struct {
		Id       *common.Hash    `json:"assetId" gencodec:"required"`
		Code     *common.Hash    `json:"assetCode" gencodec:"required"`
		Owner    *common.Address `json:"owner" gencodec:"required"`
		MetaData *string         `json:"metaData" gencodec:"required"`
	}
	var dec AssetToken
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id == nil {
		return errors.New("missing required field 'assetId' for AssetToken")
	}
	a.Id = *dec.Id
	if dec.Code == nil {
		return errors.New("missing required field 'assetCode' for AssetToken")
	}
	a.Code = *dec.Code
	if dec.Owner == nil {
		return errors.New("missing required field 'owner' for AssetToken")
	}
	a.Owner = *dec.Owner
	if dec.MetaData == nil {
		return errors.New("missing required field 'metaData' for AssetToken")
	}
	a.MetaData = *dec.MetaData
	return nil
}

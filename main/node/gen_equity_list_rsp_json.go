// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package node

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/chain/types"
	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*EquityListRspMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e EquityListRsp) MarshalJSON() ([]byte, error) {
	type EquityListRsp struct {
		Equities []*types.AssetEquity `json:"equities" gencodec:"required"`
		Total    hexutil.Uint32       `json:"total" gencodec:"required"`
	}
	var enc EquityListRsp
	enc.Equities = e.Equities
	enc.Total = hexutil.Uint32(e.Total)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *EquityListRsp) UnmarshalJSON(input []byte) error {
	type EquityListRsp struct {
		Equities []*types.AssetEquity `json:"equities" gencodec:"required"`
		Total    *hexutil.Uint32      `json:"total" gencodec:"required"`
	}
	var dec EquityListRsp
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Equities == nil {
		return errors.New("missing required field 'equities' for EquityListRsp")
	}
	e.Equities = dec.Equities
	if dec.Total == nil {
		return errors.New("missing required field 'total' for EquityListRsp")
	}
	e.Total = uint32(*dec.Total)
	return nil
}

// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package config

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*RpcMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RpcHttp) MarshalJSON() ([]byte, error) {
	type RpcHttp struct {
		Disable       bool           `json:"disable"`
		Port          hexutil.Uint32 `json:"port"  gencodec:"required"`
		CorsDomain    string         `json:"corsDomain"`
		VirtualHosts  string         `json:"virtualHosts"`
		ListenAddress string         `json:"listenAddress"`
	}
	var enc RpcHttp
	enc.Disable = r.Disable
	enc.Port = hexutil.Uint32(r.Port)
	enc.CorsDomain = r.CorsDomain
	enc.VirtualHosts = r.VirtualHosts
	enc.ListenAddress = r.ListenAddress
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RpcHttp) UnmarshalJSON(input []byte) error {
	type RpcHttp struct {
		Disable       *bool           `json:"disable"`
		Port          *hexutil.Uint32 `json:"port"  gencodec:"required"`
		CorsDomain    *string         `json:"corsDomain"`
		VirtualHosts  *string         `json:"virtualHosts"`
		ListenAddress *string         `json:"listenAddress"`
	}
	var dec RpcHttp
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Disable != nil {
		r.Disable = *dec.Disable
	}
	if dec.Port == nil {
		return errors.New("missing required field 'port' for RpcHttp")
	}
	r.Port = uint32(*dec.Port)
	if dec.CorsDomain != nil {
		r.CorsDomain = *dec.CorsDomain
	}
	if dec.VirtualHosts != nil {
		r.VirtualHosts = *dec.VirtualHosts
	}
	if dec.ListenAddress != nil {
		r.ListenAddress = *dec.ListenAddress
	}
	return nil
}

// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package config

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*ConfigMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c Config) MarshalJSON() ([]byte, error) {
	type Config struct {
		ChainID     hexutil.Uint32 `json:"chainID"        gencodec:"required"`
		GenesisHash hexutil.Bytes  `json:"genesisHash"    gencodec:"required"`
		DataDir     string         `json:"dataDir"        gencodec:"required"`
		DbUri       string         `json:"dbUri"          gencodec:"required"`
		DbDriver    string         `json:"dbDriver"       gencodec:"required"`
		LogLevel    hexutil.Uint32 `json:"logLevel"       gencodec:"required"`
		CoreNode    string         `json:"coreNode"       gencodec:"required"`
		Http        RpcHttp        `json:"http"`
		WebSocket   RpcWS          `json:"webSocket"`
	}
	var enc Config
	enc.ChainID = hexutil.Uint32(c.ChainID)
	enc.GenesisHash = c.GenesisHash
	enc.DataDir = c.DataDir
	enc.DbUri = c.DbUri
	enc.DbDriver = c.DbDriver
	enc.LogLevel = hexutil.Uint32(c.LogLevel)
	enc.CoreNode = c.CoreNode
	enc.Http = c.Http
	enc.WebSocket = c.WebSocket
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *Config) UnmarshalJSON(input []byte) error {
	type Config struct {
		ChainID     *hexutil.Uint32 `json:"chainID"        gencodec:"required"`
		GenesisHash *hexutil.Bytes  `json:"genesisHash"    gencodec:"required"`
		DataDir     *string         `json:"dataDir"        gencodec:"required"`
		DbUri       *string         `json:"dbUri"          gencodec:"required"`
		DbDriver    *string         `json:"dbDriver"       gencodec:"required"`
		LogLevel    *hexutil.Uint32 `json:"logLevel"       gencodec:"required"`
		CoreNode    *string         `json:"coreNode"       gencodec:"required"`
		Http        *RpcHttp        `json:"http"`
		WebSocket   *RpcWS          `json:"webSocket"`
	}
	var dec Config
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainID == nil {
		return errors.New("missing required field 'chainID' for Config")
	}
	c.ChainID = uint32(*dec.ChainID)
	if dec.GenesisHash == nil {
		return errors.New("missing required field 'genesisHash' for Config")
	}
	c.GenesisHash = *dec.GenesisHash
	if dec.DataDir == nil {
		return errors.New("missing required field 'dataDir' for Config")
	}
	c.DataDir = *dec.DataDir
	if dec.DbUri == nil {
		return errors.New("missing required field 'dbUri' for Config")
	}
	c.DbUri = *dec.DbUri
	if dec.DbDriver == nil {
		return errors.New("missing required field 'dbDriver' for Config")
	}
	c.DbDriver = *dec.DbDriver
	if dec.LogLevel == nil {
		return errors.New("missing required field 'logLevel' for Config")
	}
	c.LogLevel = uint32(*dec.LogLevel)
	if dec.CoreNode == nil {
		return errors.New("missing required field 'coreNode' for Config")
	}
	c.CoreNode = *dec.CoreNode
	if dec.Http != nil {
		c.Http = *dec.Http
	}
	if dec.WebSocket != nil {
		c.WebSocket = *dec.WebSocket
	}
	return nil
}
